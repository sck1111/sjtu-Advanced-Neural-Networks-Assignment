# -*- coding: utf-8 -*-
"""评估指标.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GMDjeXsfD8DEkp3rCMcznk01ltOuQltP
"""

# Download the dataset
!pip install kaggle
!mkdir ~/.kaggle
# Upload your Kaggle API token
# !cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d tawsifurrahman/covid19-radiography-database

# Unzip the dataset
!unzip covid19-radiography-database.zip -d covid19_radiography_database

# Load and preprocess the dataset
import os
from torchvision import datasets, transforms
from torch.utils.data import DataLoader, Dataset
from PIL import Image

class CovidDataset(Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.images = []
        for label in ['COVID', 'Lung_Opacity', 'Normal', 'Viral Pneumonia']:
            img_dir = os.path.join(root_dir, label, 'images') # Adjusted to include 'images' subdirectory
            for img_name in os.listdir(img_dir):
                img_path = os.path.join(img_dir, img_name)
                # Check if the file is an image file
                if img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                    self.images.append((img_path, label))
                # self.images.append((os.path.join(img_dir, img_name), label))

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path, label = self.images[idx]
        image = Image.open(img_path).convert('RGB')
        if self.transform:
            image = self.transform(image)
        return image, label

transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

dataset = CovidDataset(root_dir='./covid19_radiography_database/COVID-19_Radiography_Dataset', transform=transform)
dataloader = DataLoader(dataset, batch_size=64, shuffle=True)

!rm -rf covid19_radiography_database

dataloader



# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import torchvision.transforms as transforms
from torchvision.utils import save_image
from torch.utils.data import DataLoader
from torchvision import datasets
from torch.autograd import Variable
import torch.nn as nn
import torch.nn.functional as F
import torch

os.makedirs("images", exist_ok=True)

class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()

        self.init_size = 32 // 4
        self.l1 = nn.Sequential(nn.Linear(100, 128 * self.init_size ** 2))

        self.conv_blocks = nn.Sequential(
            nn.BatchNorm2d(128),
            nn.Upsample(scale_factor=2),
            nn.Conv2d(128, 128, 3, stride=1, padding=1),
            nn.BatchNorm2d(128, 0.8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Upsample(scale_factor=2),
            nn.Conv2d(128, 64, 3, stride=1, padding=1),
            nn.BatchNorm2d(64, 0.8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, 1, 3, stride=1, padding=1),
            nn.Tanh(),
        )

    def forward(self, z):
        out = self.l1(z)
        out = out.view(out.shape[0], 128, self.init_size, self.init_size)
        img = self.conv_blocks(out)
        return img

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()

        def discriminator_block(in_filters, out_filters, bn=True):
            block = [nn.Conv2d(in_filters, out_filters, 3, 2, 1), nn.LeakyReLU(0.2, inplace=True), nn.Dropout2d(0.25)]
            if bn:
                block.append(nn.BatchNorm2d(out_filters, 0.8))
            return block

        self.model = nn.Sequential(
            *discriminator_block(1, 16, bn=False),
            *discriminator_block(16, 32),
            *discriminator_block(32, 64),
            *discriminator_block(64, 128),
        )

        # The height and width of downsampled image
        ds_size = 32 // 2 ** 4
        self.adv_layer = nn.Sequential(nn.Linear(128 * ds_size ** 2, 1), nn.Sigmoid())

    def forward(self, img):
        out = self.model(img)
        out = out.view(out.shape[0], -1)
        validity = self.adv_layer(out)

        return validity

# Loss function
adversarial_loss = torch.nn.BCELoss()

# Initialize generator and discriminator
generator = Generator()
discriminator = Discriminator()

# Check for CUDA
cuda = True if torch.cuda.is_available() else False

if cuda:
    generator.cuda()
    discriminator.cuda()
    adversarial_loss.cuda()

# Initialize weights
def weights_init_normal(m):
    classname = m.__class__.__name__
    if classname.find("Conv") != -1:
        torch.nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find("BatchNorm2d") != -1:
        torch.nn.init.normal_(m.weight.data, 1.0, 0.02)
        torch.nn.init.constant_(m.bias.data, 0.0)

generator.apply(weights_init_normal)
discriminator.apply(weights_init_normal)

# Configure data loader
os.makedirs("../../data/mnist", exist_ok=True)
dataloader = torch.utils.data.DataLoader(
    datasets.MNIST(
        "../../data/mnist",
        train=True,
        download=True,
        transform=transforms.Compose(
            [transforms.Resize(32), transforms.ToTensor(), transforms.Normalize([0.5], [0.5])]
        ),
    ),
    batch_size=64,
    shuffle=True,
    drop_last=True,
)

# Optimizers
optimizer_G = torch.optim.Adam(generator.parameters(), lr=0.0002, betas=(0.5, 0.999))
optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=0.0002, betas=(0.5, 0.999))

Tensor = torch.cuda.FloatTensor if cuda else torch.FloatTensor

# ----------
#  Training
# ----------

import time
training_times = []

for epoch in range(20):
    start_time = time.time()
    for i, (imgs, _) in enumerate(dataloader):

        # Adversarial ground truths
        valid = Variable(Tensor(imgs.shape[0], 1).fill_(1.0), requires_grad=False)
        fake = Variable(Tensor(imgs.shape[0], 1).fill_(0.0), requires_grad=False)

        # Configure input
        real_imgs = Variable(imgs.type(Tensor))

        # -----------------
        #  Train Generator
        # -----------------

        optimizer_G.zero_grad()

        # Sample noise as generator input
        z = Variable(Tensor(np.random.normal(0, 1, (imgs.shape[0], 100))))

        # Generate a batch of images
        gen_imgs = generator(z)

        # Loss measures generator's ability to fool the discriminator
        g_loss = adversarial_loss(discriminator(gen_imgs), valid)

        g_loss.backward()
        optimizer_G.step()

        # ---------------------
        #  Train Discriminator
        # ---------------------

        optimizer_D.zero_grad()

        # Measure discriminator's ability to classify real from generated samples
        real_loss = adversarial_loss(discriminator(real_imgs), valid)
        fake_loss = adversarial_loss(discriminator(gen_imgs.detach()), fake)
        d_loss = (real_loss + fake_loss) / 2

        d_loss.backward()
        optimizer_D.step()

        batches_done = epoch * len(dataloader) + i
        if batches_done % 300 == 0:
            save_image(gen_imgs.data[:25], "images/%d.png" % batches_done, nrow=5, normalize=True)

        if len(dataloader) % 200 == 0:
            print(
            "[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f]"
#             % (epoch, 20, i, len(dataloader), d_loss.item(), g_loss.item())
        )

    end_time = time.time()
    epoch_time = end_time - start_time
    training_times.append(epoch_time)

num_epochs = 20
total_training_time = sum(training_times)
avg_training_time_per_epoch = total_training_time / num_epochs

print(f"Total training time: {total_training_time} seconds")
print(f"Avg training time per epoch: {avg_training_time_per_epoch} seconds")

# print(len(real_imgs), len(gen_imgs_dcgan))

def calculate_fid(real_images, generated_images):
    mu_real, sigma_real = np.mean(real_images, axis=0), np.cov(real_images, rowvar=False)
    mu_gen, sigma_gen = np.mean(generated_images, axis=0), np.cov(generated_images, rowvar=False)
    ssdiff = np.sum((mu_real - mu_gen)**2.0)
    covmean = sqrtm(sigma_real.dot(sigma_gen))
    if np.iscomplexobj(covmean):
        covmean = covmean.real
    fid = ssdiff + np.trace(sigma_real + sigma_gen - 2.0 * covmean)
    return fid

def calculate_psnr(real_images, generated_images):
    psnr_values = [psnr(real_images[i].cpu().numpy().transpose(1, 2, 0), generated_images[i].cpu().numpy().transpose(1, 2, 0)) for i in range(len(real_images))]
    return np.mean(psnr_values)

def calculate_ssim(real_images, generated_images):
    ssim_values = [ssim(real_images[i].cpu().numpy().transpose(1, 2, 0), generated_images[i].cpu().numpy().transpose(1, 2, 0), multichannel=True) for i in range(len(real_images))]
    return np.mean(ssim_values)

import pandas as pd

# Summarize and visualize results
def summarize_results(fid_scores, psnr_scores, ssim_scores, training_times):
    results = {
        'Model': ['DCGAN', 'VAE', 'WGAN-GP'],
        'FID Score': fid_scores,
        'PSNR': psnr_scores,
        'SSIM': ssim_scores,
        'Training Time (s)': training_times
    }

    df_results = pd.DataFrame(results)
    print(df_results)

    df_results.plot(x='Model', y=['FID Score', 'PSNR', 'SSIM', 'Training Time (s)'], kind='bar', subplots=True, layout=(2, 2), figsize=(14, 10))
    plt.show()

# Collect scores
fid_scores = [fid_dcgan, fid_vae, fid_wgan_gp]
psnr_scores = [psnr_dcgan, psnr_vae, psnr_wgan_gp]
ssim_scores = [ssim_dcgan, ssim_vae, ssim_wgan_gp]
# Assume training times are recorded
training_times = [1000, 1200, 1100]

summarize_results(fid_scores, psnr_scores, ssim_scores, training_times)